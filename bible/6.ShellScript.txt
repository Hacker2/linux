Shell scripts are the equivalent of batch fi les in MS-DOS
NAME=value        - defin var
CITY="Springfield"
PI=3.14159265
MYDATE=$date    - $ means reuse variable
MYDATE=$(date)    - run command date and set it as value

echo '$HOME *** `date`'         - literly
echo "$HOME *** `date`"         - not literly

command line arguments and is referenced as $0, $1, $2, $3...$n
$?, which receives the exit status, zero means the command exited successfully

read -p "Type in an adjective, noun and verb (past tense): " a1 n1 v1         - read parameters
echo "He sighed and $v1 to the elixir. Then he ate the $a1 $n1."

$CITY just shorthand for the notation ${CITY};
${var:-value}—If variable is unset or empty, expand this to value.
${var#pattern}—Chop the shortest match for pattern from the front of var’s value.
${var##pattern}—Chop the longest match for pattern from the front of var’s value.
${var%pattern}—Chop the shortest match for pattern from the end of var’s value.
${var%%pattern}—Chop the longest match for pattern from the end of var’s value.
THIS="Example"
THIS=${THIS:-"Not Set"}
THAT=${THAT:-"Not Set"}
echo $THIS        - print example
echo $THAT        - print not set

MYFILENAME=/home/digby/myfile.txt—Sets the value of MYFILENAME
FILE=${MYFILENAME##*/}—FILE becomes myfile.txt
DIR=${MYFILENAME%/*}—DIR becomes /home/digby
NAME=${FILE%.*}—NAME becomes myfile
EXTENSION=${FILE##*.}—EXTENSION becomes txt

Bash uses untyped variables, meaning it normally treats variables as strings or text, but can change them on the fl y if you want it to. Unless you tell it otherwise with declare, your
variables are just a bunch of letters to bash. But when you start trying to do arithmetic with them, bash converts them to integers if it can
Integer arithmetic can be performed using the built-in let command or through the external expr or bc commands

BIGNUM=1024
let RESULT=$BIGNUM/16
RESULT=`expr $BIGNUM / 16`
RESULT=`echo "$BIGNUM / 16" | bc`
let foo=$RANDOM; echo $foo

I=0
echo The value of I after increment is $((++I))        - another way

VARIABLE=1
if [ $VARIABLE -eq 1 ] ; then
echo "The variable is 1"
fi

STRING="Friday"
if [ $STRING = "Friday" ] ; then
echo "WhooHoo. Friday."
else
echo "Will Friday ever get here?"
fi

TRING="FRIDAY"
if [ "$STRING" != "Monday" ] ; then
echo "At least it's not Monday"
fi

filename="$HOME"
if [ -f "$filename" ] ;
echo "$filename is a
elif [ -d "$filename" ]
echo "$filename is a
else
echo "I have no idea
fi

-a file Does the fi le exist? (same as -e)
-b file Is the fi le a block special device?
-c file Is the fi le character special (for example, a character device)? Used to iden-
tify serial lines and terminal devices.
-d file Is the fi le a directory?
-e file Does the fi le exist? (same as -a)
-f file Does the fi le exist, and is it a regular fi le (for example, not a directory,
socket, pipe, link, or device fi le)?
-g file Does the fi le have the set-group-id (SGID) bit set?
-h file Is the fi le a symbolic link? (same as -L) 7
-k file Does the fi le have the sticky bit set?
-L file Is the fi le a symbolic link?
-n string Is the length of the string greater than 0 bytes?
-O file Do you own the fi le?
-p file Is the fi le a named pipe?
-r file Is the fi le readable by you?
-s file Does the fi le exist, and is it larger than 0 bytes?
-S file Does the fi le exist, and is it a socket?
-t fd Is the fi le descriptor connected to a terminal?
-u file Does the fi le have the set-user-id (SUID) bit set?
-w file Is the fi le writable by you?
-x file Is the fi le executable by you?
-z string Is the length of the string 0 (zero) bytes?
expr1 -a expr2 Are both the fi rst expression and the second expression true?
expr1 -o expr2 Is either of the two expressions true?
file1 -nt file2 Is the fi rst fi le newer than the second fi le (using the modifi cation timestamp)?
file1 -ot file2 Is the fi rst fi le older than the second fi le (using the modifi cation timestamp)?
file1 -ef file2 Are the two fi les associated by a link (a hard link or a symbolic link)?
var1 = var2 Is the fi rst variable equal to the second variable?
var1 -eq var2 Is the fi rst variable equal to the second variable?
var1 -ge var2 Is the fi rst variable greater than or equal to the second variable?
var1 -gt var2 Is the fi rst variable greater than the second variable?
var1 -le var2 Is the fi rst variable less than or equal to the second variable?
var1 -lt var2 Is the fi rst variable less than the second variable?
var1 != var2 Is the fi rst variable not equal to the second variable?
var1 -ne var2 Is the fi rst variable not equal to the second variable?

dirname="/tmp/testdir"
[ -d "$dirname" ] || mkdir "$dirname"                                          - shorthand method || indicate that if the directory being tested for doesn’t exist
[ $# -ge 3 ] && echo "There are at least 3 command line arguments."            - tested to see if it includes at least three command-line arguments

case "VAR" in
Result1)
{ body };;
Result2)
{ body };;
*)
{ body };;
esac

case `date +%a` in
"Mon")
BACKUP=/home/myproject/data0
TAPE=/dev/rft0
# Note the use of the double semi-colon to end each option
;;
# Note the use of the "|" to mean "or"
"Tue" | "Thu")
BACKUP=/home/myproject/data1
TAPE=/dev/rft1
;;
"Wed" | "Fri")
BACKUP=/home/myproject/data2
TAPE=/dev/rft2
;;
# Don't do backups on the weekend.
*)
7
BACKUP="none"
TAPE=/dev/null
;;
esac

for VAR in LIST
do
{ body }
done

for NUMBER in 0 1 2 3 4 5 6 7 8 9
do
echo The number is $NUMBER
done
for FILE in `/bin/ls`
do
echo $FILE
done

for NAME in John Paul Ringo George ; do
echo $NAME is my favorite Beatle
done

LIMIT=10
# Double parentheses, and no $ on LIMIT even though it's a variable!
for ((a=1; a <= LIMIT ; a++)) ; do
echo "$a"
done

while condition
do
{ body }
done
until condition
do
{ body }
done

N=0
while [ $N -lt 10 ] ; do
echo -n $N
let N=$N+1
done

N=0
until [ $N -eq 10 ] ; do
echo -n $N
let N=$N+1
done

general regular expression parser (grep), grep is just a way to fi nd patterns in fi les or text
cut
tr
sed
